library(MASS)
fix MASS
fix(MASS)
mass <- fix(MASS)
library(ISLR)
package.install
package.install()
install.packages("ISLR")
library(ISLR)
fix ISLR
fix(ISLR)
summary(ISLR)
str(ISLR)
fix(Boston)
summary(MASS)
fix(Boston)
lm.fit(medv~lstat)
lm.fit=lm(medv~lstat)
lm.fit=lm(medv~lstat, data=Boston)
lm.fit
summary(lm.fit)
summary(Boston)
help(Boston)
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
predict(lm.fit, data.frame(lstat=(c(5,10,15)),interval="predition")
predict(lm.fit, data.frame(lstat=(c(5,10,15)),interval="predition"))
predict(lm.fit, data.frame(lstat=(c(5,10,15)),interval="predition"))
predict(lm.fit, data.frame(lstat=(c(5,10,15)),interval="confidence"))
predict(lm.fit, data.frame(lstat=(c(5,10,15)),interval="confidence"))
predict(lm.fit, data.frame(lstat= c(5,10,15)),interval="confidence")
predict(lm.fit, data.frame(lstat= c(5,10,15)),interval="prediction")
?prediction
help("predict")
plot(l;stat,medv)
plot(lstat,medv)
plot(Boston$lstat,Boston$medv)
abline(lm.fit)
abline(lm.fit, col="blue")
abline(lm.fit, col="blue", lwd=3)
abline(lm.fit, col="blue", lwd=3, pch=20)
abline(lm.fit, col="blue", lwd=3, pch="+")
plot(lstat,medv, pch=20)
plot(College$lstat,College$medv, pch=20)
plot(Boston$lstat,Boston$medv, pch=20)
plot(Boston$lstat,Boston$medv, pch=40)
plot(Boston$lstat,Boston$medv, pch=50)
plot(Boston$lstat,Boston$medv, pch=20)
plot(Boston$lstat,Boston$medv, pch=51)
plot(Boston$lstat,Boston$medv, pch=93)
plot(Boston$lstat,Boston$medv, pch="poop")
abline(lm.fit, col="red", lwd=2)
plot(1:20,1:20,pch=1:20)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
clear
lm.fit(mdev~lstat+age, data=Boston)
lm.fit(medv~lstat+age, data=Boston)
lm.fit=lm(medv~lstat+age, data=Boston)
sumary(lm.fit)
summary(lm.fit)
coef(lm.fit)
lm.fit=lm(medv~.,data=Boston)
str(lm.fit)
summary(lm.fit)
str(Boston)
summary(lm.fit)
help(Boston)
lm.fit=lm(medv~.-age,data=Boston)
summary(lm.fit)
lm.fit=lm(medv~.,data=Boston)
lm.fit1=lm(medv~-age.,data=Boston)
lm.fit1=lm(medv~.-age,data=Boston)
lm.fit1=update(lm.fit, ~.-age)
summary(lm.fit1)
summary(lm(medv~lstat*age, data=Boston))
setwd("C:/Users/Harrison/Documents/3rd_year/Sem2/Data/oeisData/OEIS")
#read the stripped data from files
stripped <- read.csv("../stripped", header= F)
names <- read.delim("../names", header= F, sep= "\n", quote= "")
names(stripped) <- c("id", 1:(length(stripped)-1))
seqs <- stripped[,-1]
seq.freq <- table(unlist(seqs))
seq.freq <- sort(seq.freq, decreasing = T)
del(seqs)
freq.top <- seq.freq[1:100]
hist(freq.top)
view(freq.top)
View(freq.top)
100%10
mod(100, 0)
100 %% 0
100 %% 1
100 %% 3
freq10 <- seq.freq[seq.freq$Var1 %% 10 == 0]
seq.freq$Var1
seq.freq %% 10 == 0
freq.top %% 10 == 0
freq10 <- seq.freq[seq.freq %% 10 == 0]
View(freq10)
data.class(seq.freq)
?subset
freq10 <- subset(seq.freq, Var1 %% 10 == 0)
freq10 <- seq.freq[seq.freq$Var1 %% 10 == 0]
freq10 <- seq.freq[matrix(seq.freq)$Var1 %% 10 == 0]
freq10 <- seq.freq[data.frame(seq.freq)$Var1 %% 10 == 0]
?table
as.array(freq.top)
View(as.array(freq.top))
top_ar <- as.array(freq.top)
top_ar[0]
top_ar[1]
top_ar[1,1]
top_ar[1][1]
top_ar[1][1][1]
top_ar[2]
top_ar[2][1]
top_ar$Var1
top_ar["Var1"
]
top_ar["Var1"]
top_ar["1"]
top_ar
data.class(top_ar[1])
data.class(seq.freq[1])
seq.freq[1]
dim(top_ar)
dim(freq.top)
p <- 100
freq.top[100]
freq.top[p]
freq.top["p"]
freq.top[as.factor(p)]
as.factor(p)
p
as.string(p)
freq.top["100"]
freq.top[toString(p)]
freq.top[toString(800)]
freq.top[toString(800)] == NA
freq.top[toString(800)] == <NA>
NA(freq.top["800"])
is.na(freq.top["800"])
data.class(c(1,2))
c(1,2)[1]
freq.top["100"][1]
freq.top["100"]
poop <- freq.top["100"]
poop[0]
poop[1]
poop[2]
poop[1][1]
#get a table of the frequencies of all powers of n
powersOf <- function(n){
freq.powers <- as.table()
p <- 0
freq <- seq.freq[toString(val)]
while(!is.na(freq)){
freq.powers <- rbind(freq.powers, freq)
}
return(freq.powers)
}
freq10 <- powersOf(10)
#get a table of the frequencies of all powers of n
powersOf <- function(n){
freq.powers <- as.table(NULL)
p <- 0
freq <- seq.freq[toString(val)]
while(!is.na(freq)){
freq.powers <- rbind(freq.powers, freq)
}
return(freq.powers)
}
freq10 <- powersOf(10)
#get a table of the frequencies of all powers of n
powersOf <- function(n){
freq.powers <- seq.freq[1:0]
p <- 0
freq <- seq.freq[toString(val)]
while(!is.na(freq)){
freq.powers <- rbind(freq.powers, freq)
}
return(freq.powers)
}
freq10 <- powersOf(10)
seq.freq[1:0]
#get a table of the frequencies of all powers of n
powersOf <- function(n){
freq.powers <- seq.freq["1"]
p <- 1
freq <- seq.freq[toString(n^p)]
while(!is.na(freq)){
freq.powers <- rbind(freq.powers, freq)
}
return(freq.powers)
}
powersOf(10)
#get a table of the frequencies of all powers of n
powersOf <- function(n){
freq.powers <- seq.freq["1"]
p <- 1
freq <- seq.freq[toString(n^p)]
while(!is.na(freq)){
print(n^p)
freq.powers <- rbind(freq.powers, freq)
}
return(freq.powers)
}
powersOf(10)
#get a table of the frequencies of all powers of n
powersOf <- function(n){
freq.powers <- seq.freq["1"]
p <- 1
freq <- seq.freq[toString(n^p)]
while(!is.na(freq)){
print(n^p)
freq.powers <- rbind(freq.powers, freq)
p <- p+1
}
return(freq.powers)
}
powersOf(10)
powersOf(10)
#return whether a is a power of p
isPower <- function(a, p){
while(a != 1){
if(a %%p != 0){
return(FALSE)
}
a <- a/p
}
return(TRUE)
}
isPower(10,10)
isPower(10,7)
isPower(200,10)
isPower(200,20)
isPower(144,12)
freq10 <- seq.freq[isPower(seq.freq, 10)]
?apply
apply(freq.top, 1, isPower, p)
freq10 <- table(unlist(seqs)[unlist(seqs) %% 10 == 0])
View(freq10)
warnings()
seqs.list <- unlist(seqs)
seqs.list[seqs.list %% 10 == 0]
summary(seq.freq)
freq.top
freq.top["100"]
freq.top[100]
freq.top <- seq.freq[1:10]
freq.top
freq.top.names
names(freq.top)
names(freq.top) %% 10 == 0
toInt
toNumeric("1")
as.integer("1")
as.integer(names(freq.top))
freq10 <- seq.freq[as.integer(names(seq.freq)) %% 10 == 0]
freq10
as.integer(names(seq.freq))
warnings()
warning()
View(freq10)
log(10)
log10(10)
log10(100)
log10(1000)
3.3 %% 1
log(100)/log(10)
#return a table of the frequnecies of the powers of n
powerFreq(n){
ints <- as.integer(names(seq.freq))
indices <- (log(ints)/log(n)) %% 1 == 0
return(seq.freq[indices])
}
#return a table of the frequnecies of the powers of n
powerFreq <- function(n){
ints <- as.integer(names(seq.freq))
indices <- (log(ints)/log(n)) %% 1 == 0
return(seq.freq[indices])
}
freq10 powerFreq(10)
freq10 <- powerFreq(10)
View(freq10)
#return a table of the frequnecies of the powers of n
powerFreq <- function(n){
ints <- as.integer(names(seq.freq))
indices <- (log(ints)/log(n)) %% 1 == 0
freqN <- seq.freq[indices]
return(na.omit(freqN))
}
freq10 <- powerFreq(10)
as.integer(names(seq.freq))
as.numeric(names(seq.freq))
seq.freq[!is.integer(names(seq.freq))]
freq10 <- powerFreq(10)
#return a table of the frequnecies of the powers of n
powerFreq <- function(n){
ints <- as.integer(names(seq.freq))
indices <- (log(ints)/log(n)) %% 1 == 0
freqN <- seq.freq[indices]
return(freqN)
}
freq10 <- powerFreq(10)
dim(freq10)
freq10 <- na.omit(freq10)
?na.omit
freq10 <- na.exclude(freq10)
barplot(freq10)
seqs.list <- unlist(seqs)
tens <- seqs.list[seqs.list == 10]
length(tens)
seq.freq["10"]
sum(seq.freq)
length(seqs.list)
seq.freq <- table(unlist(seqs))
seqs <- stripped[,-1]
seq <- as.integer(seqs)
seq[1:10,1:5]
seqs[1:10,1:5]
subset <- seq[1:10, 1:5]
subset <- seqs[1:10, 1:5]
subset.list <- unlist(subset)
subset.list
View(subset)
View(subset.list)
#read the stripped data from files
stripped <- read.csv("../stripped", header= F)
names <- read.delim("../names", header= F, sep= "\n", quote= "")
names(stripped) <- c("id", 1:(length(stripped)-1))
seqs <- stripped[,-1]
seq.freq <- table(unlist(seqs))
seq.freq <- sort(seq.freq, decreasing = T)
View(seq.freq)
count <- 0
subset <- seq.freq[1:100]
View(subset)
subset[,'Var1']
subset[1]
subset[1,1]
subset[1][1]
subset[1,1]
seq.freq$Var1
seq.freq['1']
seq.freq['2']
seq.freq[tostring(2)]
as.string(2)
?string
text(2)
as.text(2)
?string
#return a table of the frequnecies of the powers of n
powerFreq <- function(n){
ints <- as.integer(names(seq.freq))
indices <- (log(ints)/log(n)) %% 1 == 0
freqN <- seq.freq[indices]
return(freqN)
}
powerFreq(10)
subset <- powerFreq(10)
?table
powerFreq <- function(n){
subset <- as.table(seq.freq["1"])
}
powerFreq(10)
powerFreq <- function(n){
subset <- as.table(seq.freq["1"])
return(subset)
}
powerFreq(10)
?for
powerFreq <- function(n){
subset <- as.table(seq.freq["1"])
for(i in 1:100){
subset <- c(subset, seq.freq[toString(n^i)])
}
return(subset)
}
powerFreq <- function(n){
subset <- as.table(seq.freq["1"])
for(i in 1:100){
subset <- c(subset, seq.freq[toString(n^i)])
}
return(subset)
}
subset <- powerFreq(10)
View(subset)
subset["10"]
subset[1]
#create a dataframe where the nth column is a table of the
#frequencies of the powers of n
power.frame <- as.data.frame(powerFreq(1,100));
for(i in 2:16){
power.frame <- data.frame(power.frame, powerFreq(i, 100))
}
#return a table of the frequnecies of the powers of n
#up to n^k
powerFreq <- function(n, k){
subset <- as.table(seq.freq["1"])
for(i in 1:k){
subset <- c(subset, seq.freq[toString(n^i)])
}
return(subset)
}
#create a dataframe where the nth column is a table of the
#frequencies of the powers of n
power.frame <- as.data.frame(powerFreq(1,100));
for(i in 2:16){
power.frame <- data.frame(power.frame, powerFreq(i, 100))
}
View(power.frame)
subset <- powerFreq(2)
subset <- powerFreq(2, 10)
names(power.frame) <- 1:maxN
#create a dataframe where the nth column is a table of the
#frequencies of the powers of n
maxN <- 16
names(power.frame) <- 1:maxN
maxK <- 100 #the biggest power
rownames(power.frame) <- 1:maxK
len(rownames(power.frame))
length(rownames(power.frame))
rownames(power.frame) <- 0:maxK
#remove the 0th power
power.frame <- powerframe[-1:]
colnames(power.frame) <- 1:maxN
rownames(power.frame) <- 0:maxK
#remove the 0th power
power.frame <- power.frame[-1:]
colnames(power.frame) <- 1:maxN
rownames(power.frame) <- 0:maxK
#remove the 0th power
power.frame <- power.frame[-1,]
colnames(power.frame) <- 1:maxN
rownames(power.frame) <- 1:maxK
sum(power.frame)
sum(power.frame[,2])
power.sums <- as.array(power.frame[1,1])
for(i in 2:16){}
for(i in 2:16){
power.sums[i]=sum(power.frame[,i])
}
View(power.sums)
?sum
#create an array where the index represents n
#and the value is the freqencies of all powers of n up to n^maxK
power.sums <- as.array(power.frame[1,1]) #first take the powers of 1
for(i in 2:maxN){
power.sums[i] <- sum(power.frame[,i], na.rm=T)
}
plot(power.sums)
plot(power.frame[1,])
plot(as.array(power.frame[1,]))
plot(unlist(power.frame[1,]))
par(mfrow(1,2))
par(mfrow= c(1,2))
> plot(power.sums)
plot(power.sums)
plot(unlist(power.frame[1,]))
par(mfrow= c(2,1))
plot(power.sums)
plot(unlist(power.frame[1,]))
par(mfrow= c(1,1))
plot(unlist(power.frame[2,]))
plot(unlist(power.frame[3,]))
plot(unlist(power.frame[4,]))
View(power.frame)
power.frame[is.na(power.frame)] <- 0
power.frame.ratio <- power.frame/power.sums
View(power.frame.ratio)
267/power.sums[5]
power.frame.ratio[8,5]
power.frame[8,5]/power.sums[5]
power.frame.ratio <- data.frame(power.frame[,1]/power.frame[,1])
for(i in 2:16){}
for(i in 2:16){
